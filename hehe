#!/bin/bash
clear
# Function to display a progress bar
# Check for root privilege
[[ "$(whoami)" != "root" ]] && {
    echo -e "\033[1;33m[\033[1;31mErro\033[1;33m] \033[1;37m- \033[1;33mâ—‡ YOU NEED TO RUN AS ROOT!\033[0m"
    exit 0
}

# --- CUSTOMIZATION VARIABLES ---
YOUR_BRAND_NAME="Matrix VPS Manager"
YOUR_TELEGRAM_HANDLE="@Matrixxxxxxxxx" # Your Telegram handle for support messages
# ADMIN_TELEGRAM_HANDLE_1 and ADMIN_TELEGRAM_HANDLE_2 are removed as verification is gone.
# bot_tokens and chat_ids are removed as Telegram verification is gone.
# Default username and password (CRITICAL: CHANGE THIS!)
psw="ChangeMeToAStrongUniquePassword!" # This is the password for the 'chks' user
usn="chks" # This is the system user created by the script

# --- END CUSTOMIZATION VARIABLES ---

fun_bar() {
    comando[0]="$1"
    comando[1]="$2"
    
    (
    [[ -e $HOME/fim ]] && rm $HOME/fim
    ${comando[0]} -y > /dev/null 2>&1
    ${comando[1]} -y > /dev/null 2>&1
    touch $HOME/fim
    ) > /dev/null 2>&1 &
    
    tput civis
    echo -ne "  \033[1;33mâ—‡ PLEASE WAIT... \033[1;37m- \033[1;33m["
    while true; do
        for ((i=0; i<18; i++)); do
            echo -ne "\033[1;31m#"
            sleep 0.1s
        done
        [[ -e $HOME/fim ]] && rm $HOME/fim && break
        echo -e "\033[1;33m]\033[0m"
        sleep 1s
        tput cuu1
        tput dl1
        echo -ne "  \033[1;33mâ—‡ PLEASE WAIT... \033[1;37m- \033[1;33m["
    done
    echo -e "\033[1;33m]\033[1;37m -\033[1;32mâ—‡ DONE!\033[0m"
    tput cnorm
}

# Function to verify key
verif_key() {
    krm=$(echo '5:q-3gs2.o7%8:1'|rev)
    chmod +x $_Ink/list > /dev/null 2>&1
    [[ ! -e "$_Ink/list" ]] && {
        echo -e "\n\033[1;31mâ—‡ KEY INVALID! (Missing list file or permission error)\033[0m"
        rm -rf $HOME/hehe > /dev/null 2>&1 # Ensure this path is correct if you change script name
        sleep 2
        clear
        exit 1
    }
}


# Define ip_address as a global variable (still useful for display messages)
ip_address=$(hostname -I | awk '{print $1}')

# --- REMOVED: check_request_limit, send_code_telegram, prompt_verification_code functions and their calls ---
# This means no rate limiting, no Telegram verification, and no IP logging (from iplogger.org)
# All related variables like time_interval, max_requests, bot_tokens, chat_ids, ADMIN_TELEGRAM_HANDLE_1, ADMIN_TELEGRAM_HANDLE_2 are also now effectively removed.
# The associated hidden files for tracking are also no longer created/used/removed by the script:
# /usr/local/bin/.ip_trak
# /usr/local/bin/.vff92h
# /root/vcheck directory

clear
# Variable Initialization (obfuscated paths - rely on Wolf's structure)
_lnk=$(echo 'z1:y#x.5s0ul&p4hs$s.0a72d*n-e!v89e032:3r'| sed -e 's/[^a-z.]//ig'| rev)
_Ink=$(echo '/3Ã—u3#s87r/l32o4Ã—c1aÃ—l1/83Ã—l24Ã—i0bÃ—'|sed -e 's/[^a-z/]//ig') # /usr/local/lib
_1nk=$(echo '/3Ã—u3#sÃ—87r/83Ã—l2Ã—4Ã—i0bÃ—'|sed -e 's/[^a-z/]//ig') # /usr/lib

# Welcome message
echo -e "\033[1;31m\033[0m"
tput setaf 7 ; tput setab 4 ; tput bold ; printf '%40s%s%-12s\n' "â—‡â”€â”€â”€â”€â”€â”€â”€â”€â”€ã…¤ðŸŒ€WELCOME TO ${YOUR_BRAND_NAME}ðŸŒ€ã…¤â”€â”€â”€â”€â”€â”€â”€â”€â”€â—‡" ; tput sgr0
echo ""
echo -e "\033[1;33mã…¤THIS SCRIPT CONTAINS THE FOLLOWING!!\033[0m"
echo ""
echo -e "\033[1;33mâ—‡ \033[1;32mINSTALL A SET OF SCRIPTS AS TOOLS FOR\033[0m"
echo ""
echo -e "\033[1;33mâ—‡  \033[1;32mNETWORK, SYSTEM AND USER MANAGEMENT.\033[0m"
echo -e "\033[1;33mâ—‡  \033[1;32mEASY INTERFACE FOR BEGINNERS.\033[0m"
echo ""
echo -e "\033[1;31mâ—‡â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ã…¤ðŸŒ€ ${YOUR_BRAND_NAME} ðŸŒ€ã…¤â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â—‡\033[0m"
echo ""

# Prompt to continue
echo -ne "\033[1;36mâ—‡ Do you want to continue? [Y/N]: \033[1;37m"
read x
[[ $x = @(n|N) ]] && exit

# Modify SSH configuration and restart service
sed -i 's/Port 22222/Port 22/g' /etc/ssh/sshd_config  > /dev/null 2>&1
service ssh restart  > /dev/null 2>&1
echo ""

# Prompt user if they want to add a domain name
echo -ne "\033[1;36mâ—‡ Do you want to add a domain name? [Y/N]: \033[0m"
read add_domain
echo ""
echo -e "\033[1;32m>>> Please make sure your DOMAIN is linked to Cloudflare for proper functionality <<<\033[0m"

domain_name=""
if [[ "$add_domain" == [Yy]* ]]; then
    domain_attempts=0
    while [[ $domain_attempts -lt 3 ]]; do
        echo -ne "\033[1;36mâ—‡ Please enter your domain name (e.g., example.com): \033[0m"
        read domain_input
        echo ""
        
        if [[ $domain_input =~ ^[a-zA-Z0-9][a-zA-Z0-9.-]*\.[a-zA-Z]{2,}$ ]]; then
            domain_name="$domain_input"
            echo -e "\033[1;33mDomain name set to: \033[1;32m$domain_name\033[0m"
            echo "$domain_name" > /etc/.domain
            break
        else
            ((domain_attempts++))
            if [[ $domain_attempts -eq 3 ]]; then
                echo -e "\033[1;31mExceeded maximum attempts. No domain name will be added.\033[0m"
                domain_name=""
            else
                echo -e "\033[1;31mInvalid domain name format. Please try again.\033[0m"
            fi
        fi
    done
else
    echo -e "\033[1;33mNo domain name will be added.\033[0m"
fi


# Key Verification (downloads 'list' from THEIR GitHub repo)
# This still points to AtizaD/WOLF-VPS-MANAGER. If you want to fully remove external dependencies, remove this.
echo -e "\n\033[1;36mâ—‡ CHECKING...(It Take Some Time Please Wait!)\033[1;37m \033[0m" ;
rm $_Ink/list > /dev/null 2>&1;
mkdir -p "$_Ink" > /dev/null 2>&1
wget -P "$_Ink" https://raw.githubusercontent.com/AtizaD/WOLF-VPS-MANAGER/main/Install/list > /dev/null 2>&1;
verif_key
sleep 3s

# --- FIX: Create the 'menu' command from YOUR GitHub ---
echo -e "\n\033[1;32mCreating your custom 'menu' command...\033[0m"
mkdir -p /usr/local/bin > /dev/null 2>&1
wget https://raw.githubusercontent.com/Matrix1999/matrix-vps-script/main/menu -O /usr/local/bin/menu > /dev/null 2>&1 || { echo "ERROR: Could not download custom menu script!"; exit 1; }
chmod +x /usr/local/bin/menu || { echo "ERROR: Failed to make custom menu script executable!"; exit 1; }
echo -e "\033[1;32m'menu' command created successfully at /usr/local/bin/menu.\033[0m"
echo ""

# The original script uses /bin/h as a pointer. Replicating for compatibility if needed.
echo "/usr/local/bin/menu" > /bin/h && chmod +x /bin/h > /dev/null 2>&1


# Other downloads from 'AtizaD' (If you want to fully remove external dependencies, remove these)
rm versao* > /dev/null 2>&1
wget https://raw.githubusercontent.com/AtizaD/WOLF-VPS-MANAGER/main/Install/versao > /dev/null 2>&1
wget https://iplogger.org/2lHZ43 > /dev/null 2>&1 # This logs the IP to iplogger.org - HIGH PRIVACY CONCERN!
rm 2lHZ43 > /dev/null 2>&1


# Prompt to keep or create user database
echo -e "\n\033[1;32mâ—‡ KEY VALID!\033[1;32m"
sleep 1s
echo ""
[[ -f "$HOME/usuarios.db" ]] && {
    clear
    echo -e "\n\033[0;34mâ—‡â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â—‡\033[0m"
    echo ""
    echo -e "                 \033[1;33mâ€¢ \033[1;31mâ—‡ ATTENTION!\033[1;33mâ€¢ \033[0m"
    echo ""
    echo -e "\033[1;33mA User Database \033[1;32m(usuarios.db) \033[1;33mwas"
    echo -e "Found! Want to keep it by preserving the limit"
    echo -e "of Simutanea connections of users ? Or Want"
    echo -e "create a new database?\033[0m"
    echo -e "\n\033[1;37m[\033[1;31m1\033[1;37m] \033[1;33mKeep Database Current\033[0m"
    echo -e "\n\033[1;37m[\033[1;31m2\033[1;37m] \033[1;33mCreate a New Database\033[0m"
    echo -e "\n\033[0;34mâ—‡â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â—‡\033[0m"
    echo ""
    tput setaf 2 ; tput bold ; read -p "Option ?: " -e -i 1 optiondb ; tput sgr0
} || {
    awk -F : '$3 >= 500 { print $1 " 1" }' /etc/passwd | grep -v '^nobody' > $HOME/usuarios.db
}
[[ "$optiondb" = '2' ]] && awk -F : '$3 >= 500 { print $1 " 1" }' /etc/passwd | grep -v '^nobody' > $HOME/usuarios.db
clear
tput setaf 7 ; tput setab 4 ; tput bold ; printf '%35s%s%-18s\n' "â—‡ WAIT FOR INSTALLATION." ; tput sgr0
echo ""
echo ""
echo -e "          \033[1;33m[\033[1;31m!\033[1;33m] \033[1;32mâ—‡ UPDATING SYSTEM...\033[1;33m[\033[1;31m!\033[1;33m]\033[0m"
echo ""
echo -e "    \033[1;33mâ—‡ UPDATES USUALLY TAKE A LITTLE TIME!\033[0m"
echo ""
fun_attlist () {
    apt-get update -y
    [[ ! -d /usr/share/.hehe ]] && mkdir /usr/share/.hehe
    echo "crz: $(date)" > /usr/share/.hehe/.hehe
}
fun_bar 'fun_attlist'
clear
echo ""
echo -e "          \033[1;33m[\033[1;31m!\033[1;33m] \033[1;32mâ—‡ INSTALLING PACKAGES\033[1;33m[\033[1;31m!\033[1;33m] \033[0m"
echo ""
echo -e "\033[1;33mâ—‡ SOME PACKAGES ARE EXTREMELY NECESSARY!\033[0m"
echo ""
inst_pct() {
    _pacotes=("bc" "apache2" "cron" "screen" "nano" "unzip" "lsof" "netstat" "net-tools" "dos2unix" "nload" "jq" "curl" "figlet" "python" "python2" "python3" "python-pip" "ufw" "nginx")
    for _prog in "${_pacotes[@]}"; do
        sudo apt install $_prog -y
    done
    
    # User creation: original code had a userdel if exists, then adduser
    if id "$usn" &>/dev/null; then
        echo "User '$usn' already exists. Skipping creation."
    else
        sudo adduser --system "$usn"
        echo "$usn:$psw" | sudo chpasswd
    fi

    # The 'lxd1' user creation block (from your provided script). This seems redundant with $usn.
    # Consider if you need both or can simplify.
    username="lxd1"
    password="0001" # Hardcoded password. HIGHLY RECOMMEND CHANGING THIS!
    if id "$username" &>/dev/null; then
        echo "User '$username' already exists. Overwriting..."
        sudo userdel -r $username
    fi
    sudo adduser --system --disabled-login $username
    echo "$username:$password" | sudo chpasswd

    pip install speedtest-cli

    sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 1
    
    # UFW & Nginx setup (moved from outside inst_pct to ensure packages are installed)
    if [[ -f "/usr/sbin/ufw" ]]; then
      echo -e "\n\033[1;32mConfiguring firewall (UFW)...\033[0m"
      ufw default deny incoming
      ufw default allow outgoing
      ufw allow 22/tcp ; ufw allow 80/tcp ; ufw allow 443/tcp ; ufw allow 3128/tcp ; ufw allow 8799/tcp ; ufw allow 8080/tcp
      ufw --force enable
      echo -e "\n\033[1;37m--- Current Firewall Status ---"
      ufw status verbose
      echo -e "\033[0m"
    else
      echo "WARNING: UFW not found. Please configure your firewall manually."
    fi

    # Nginx service management
    echo -e "\n\033[1;32mConfiguring Nginx service...\033[0m"
    sudo systemctl enable nginx || { echo "WARNING: Failed to enable Nginx."; }
    sudo systemctl start nginx || { echo "WARNING: Failed to start Nginx."; }

}

fun_bar 'inst_pct'
clear
echo ""
echo -e "              \033[1;33m[\033[1;31m!\033[1;33m] \033[1;32mâ—‡ FINISHING...\033[1;33m[\033[1;31m!\033[1;33m] \033[0m"
echo ""
echo -e "      \033[1;33mâ—‡ COMPLETING FUNCTIONS AND SETTINGS!\033[0m"
echo ""
# This call is still problematic as it's passing unexpanded variables and relies on the original script's full setup
# fun_bar "$_Ink/list $_lnk $_Ink $_1nk $key"
# Placeholder or remove this line if its purpose is not clear
echo "Finalizing setup procedures..." # Placeholder

clear
echo ""
cd $HOME
IP=$(wget -qO- ipv4.icanhazip.com)
echo -e "        \033[1;33m  \033[1;32mâ—‡ INSTALLATION COMPLETED.â—‡\033[1;33m  \033[0m"
echo ""
echo -e "\033[1;31m\033[1;33mâ—‡ MAIN COMMAND:- \033[1;32mmenu\033[0m"
echo -e "\033[1;33mâ—‡ MORE INFORMATION \033[1;31m(\033[1;36mâ—‡ TELEGRAM\033[1;31m): \033[1;37m${YOUR_TELEGRAM_HANDLE} \033[1;31m( \033[1;36m ${YOUR_TELEGRAM_HANDLE} \033[1;31m )\033[0m"
echo -e ""

#Option to install udp-request script also
read -p "Do you want to install UDP-REQUEST SCRIPT ? ( Y / N ): " choice
case "$choice" in
  y|Y ) 
    git clone https://github.com/godtechprime/Udpcustom.git && cd Udpcustom && chmod +x install.sh && ./install.sh || { echo "ERROR: Failed to install UDP-REQUEST SCRIPT."; }
    ;;
  n|N ) 
    echo "You chose not to install the script. Please enter 'menu' to access the SSH account.";
    ;;
  * ) 
    echo "Invalid choice. Please enter 'Y' for Yes or 'N' for No.";
    ;;
esac

rm $HOME/hehe > /dev/null 2>&1 && cat /dev/null > ~/.bash_history && history -c
